#include <n3310lcd.c> 

//***************************************************
//****************Прототипы функций******************
//***************************************************
void baseTemplate (unsigned int TankLevel, int EngineTemperature);
//***************************************************
#define IconSize 3   //не должен быть нулем! минимум 1
#define TankCapacity 55 //объем бензобака
#define MinEngineTemperature 0  //минимальная температура двигателя для отображения
#define MaxEngineTemperature 150 
#define EngineTemperatureWarning 100
#define MaxBaseTemperature 99
#define MinBaseTemperature -50
#define OutTemperatureWarning 3

int _outTemperature,_internalTemperature,_engineTemperature;
unsigned char outTempDevice=1, internalTempDevice=2, engineTempDevice=0;

// maximum number of DS1820 devices
// connected to the 1 Wire bus
#define MAX_DS18B20 8
// number of DS1820 devices
// connected to the 1 Wire bus
unsigned char ds18b20_devices;
// DS1820 devices ROM code storage area,
// 9 bytes are used for each device
// (see the w1_search function description in the help)
unsigned char ds18b20_rom_codes[MAX_DS18B20][9];
unsigned int _arrTemplate[];
unsigned int _template;
float _volt;


//ASCII
flash char pic1[] = 
{
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0xFC,0x04,0x04,0x04,0xFC,
0x08,0x08,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0xFC,
0x04,0x04,0xFC,0x20,0x20,0x00,
0x00,0xFF,0x00,0x00,0x00,0xFF,
0x02,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x40,0x40,0x40,0xFF,
0x00,0x00,0xFF,0x04,0x04,0x00,
0x00,0xFF,0x00,0x00,0x00,0xFF,
0x81,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x10,0x10,0x92,0xFF,
0x00,0x00,0xFF,0x00,0x00,0x00,
0x00,0x7F,0x40,0x40,0x40,0x7F,
0x10,0x10,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x04,0x04,0x24,0xFF,
0x00,0x00,0xFF,0x00,0x00,0x00,
0x80,0xFF,0xF9,0xF9,0xF9,0xFF,
0x90,0x22,0x3C,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x00,0x00,0x00,
0x00,0x00,0x1C,0x3E,0x7F,0xF7,
0x81,0xB7,0xFD,0x7F,0x3E,0x1C
}; // FF


flash char icon[] = 
{
0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF,0xFF, //test
0xFF,0x81,0xFD,0x91,0xFD,0x81,0xB9,0xC5,0xC5,0xB9,0x81,0x85,0xFD,0x85,0x81,0xDD,0x81,0xFF,//hot
0x00,0xFE,0x82,0x93,0x93,0x92,0x82,0x82,0x82,0x82,0x92,0xBB,0x93,0x82,0xFE,0x00,0x00,0x00,//bat
0x00,0xFF,0x81,0xDD,0x81,0xFF,0x00,0x49,0x2A,0x1C,0x7F,0x1C,0x2A,0x49,0x00,0x00,0x00,0x00,//ace
0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,//blank
};

void baseTemplate(unsigned int TankLevel, int EngineTemperature)
{
    float TemperatureProcent, TankProcent;

    if (EngineTemperature > MaxEngineTemperature)   EngineTemperature =  MaxEngineTemperature;
    if (EngineTemperature < MinEngineTemperature)   EngineTemperature =  MinEngineTemperature;
    sprintf (lcd_buf, "%3u", EngineTemperature);
    LcdString(12,1);
    sprintf (lcd_buf, "%u", TankLevel);
    LcdString(1,1);
    TemperatureProcent = (long)EngineTemperature*100/MaxEngineTemperature; 
    LcdBar(78, 10, 79, 39, TemperatureProcent);       
    TankProcent = (long)TankLevel*100/TankCapacity;
    LcdBar(2, 10, 4, 37, TankProcent);
}

void tempDeviceInit(void)
{
    unsigned int i;

    ds18b20_devices=w1_search(0xf0,ds18b20_rom_codes);
    
    for (i=0; i<ds18b20_devices; i++)
    {
        ds18b20_init(&ds18b20_rom_codes[i][0],-30,125,DS18B20_9BIT_RES);
    }
}

void getTemperature(unsigned int devices)
{

    switch (devices)
    {
        case 3:
            _internalTemperature =  ds18b20_temperature(&ds18b20_rom_codes[internalTempDevice][0]);
        case 2:
            _outTemperature =  ds18b20_temperature(&ds18b20_rom_codes[outTempDevice][0]);
        case 1:
            _engineTemperature = ds18b20_temperature(&ds18b20_rom_codes[engineTempDevice][0]);
    }; 
}

void iconView (int ch, unsigned int inv)
{
    CharPrint(ch,6*IconSize,icon,inv,0);
}

void iconClear (void)
{
    LcdGotoXYFont(3,1);
    CharPrint(4,6*IconSize,icon,0,0);
    CharPrint(4,6*IconSize,icon,0,0);
    CharPrint(4,6*IconSize,icon,0,0);
}

int tempProcessing(int temperature)
{
  if (temperature > MaxBaseTemperature) temperature = MaxBaseTemperature;
  if (temperature < MinBaseTemperature) temperature = MinBaseTemperature;
  return temperature;
}

void readADC(unsigned int adcValue)
{
  _volt = adcValue*0.14663; 
}

void template(unsigned int numTemplate)
{
    int internalTemperature;
    int outTemperature;
    
    switch (numTemplate)     
    {
        case 0: //temperature template
            internalTemperature = tempProcessing(_internalTemperature);
            outTemperature = tempProcessing(_outTemperature);
            LcdGotoXYFont(3,2);
	        LcdChrBold(0x03);
            LcdGotoXYFont(3,4);
	        LcdChrBold(0x04);  
            sprintf (lcd_buf, "%3i\x02", outTemperature);
            LcdStringBold(5,2);
            sprintf (lcd_buf, "%3i\x02", internalTemperature);
            LcdStringBold(5,4);
            sprintf (lcd_buf, "Thermo");
	        LcdString(5,6);
            break;
        case 1:
            sprintf (lcd_buf, "%2i.%iV", (int)_volt/10, (int)_volt%10);
            LcdString(3,3);
            sprintf (lcd_buf, "Normal");
            LcdString(5,5);
            sprintf (lcd_buf, "Voltmeter");
	        LcdString(3,6);
            break;
    } 
}

void setTemplate(unsigned int numTemplate)
{
    _template = numTemplate;
    LcdClear();
    LcdImage(pic1); 
    //template(numTemplate);
}

void warning(void)
{
  iconClear();
  if (_engineTemperature >= EngineTemperatureWarning)
  {
    LcdGotoXYFont(3,1);
    iconView(1,0);
  }
  
  if (_outTemperature <= OutTemperatureWarning)
  {
    LcdGotoXYFont(9,1);
    iconView(3,0);
  }
    
}

void update(void)
{
    baseTemplate(43,_engineTemperature);
    template(_template);
    warning(); 
    LcdUpdate(); 
}

void test ()
{

    //getTemperature(ds18b20_devices);
    //setTemplate(0);      
    //inv = !inv;
    //LcdGotoXYFont(6,1);
    //iconView(2,inv);
}

